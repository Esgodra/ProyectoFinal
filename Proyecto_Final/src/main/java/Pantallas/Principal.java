package Pantallas;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
*/
import Clases.AccionAbrirArchivo;
import Clases.AccionBuscar;
import Clases.AccionGuardarArchivo;
import Clases.AccionSalir;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Event;
import java.awt.Toolkit;

import javax.swing.Action;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;
import javax.swing.WindowConstants;
import javax.swing.text.DefaultEditorKit;
/**
 *
 * @author Dell Laptop
 */
public class Principal extends javax.swing.JFrame {
    private final JTextArea areaTexto;
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        JMenuBar barraMenu = new JMenuBar();
        
        // Area de texto de 24 filas y 80 columnas
        areaTexto = new JTextArea(24, 80);
        
        construyeMenuArchivo(barraMenu);
        construyeMenuEditar(barraMenu);

        JFrame v = construyeVentanaEditor(barraMenu);
        visualizaVentana(v);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("frame1"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 787, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleName("frame1");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(false);
            }
        });
    }
    
    private JFrame construyeVentanaEditor(JMenuBar barraMenu)
    {
        JFrame v = new JFrame("Warppald");
        // La ventana tiene por defecto un BorderLayout. El menú va en la parte superior,
        // es decir, en el norte NORTH.

        v.getContentPane().add(barraMenu, BorderLayout.NORTH);
        
        // Para que se partan automáticamente las líneas al llegar al final 
        areaTexto.setLineWrap(true);
        
        // Para que el partido se haga respetando las palabras. Sólo se parte la
        // línea en los espacios entre palabras.
        areaTexto.setWrapStyleWord(true);

        JScrollPane scroll = new JScrollPane(areaTexto);
        
        // El scroll con el JTextArea se añade por defecto en el centro del BorderLayout.
        v.getContentPane().add(scroll);

        return v;
    }

    /**
     * Prepara la dimensión y posición de la ventana y la visualiza.
     *
     * @param v Ventana a visualizar.
     */
    private void visualizaVentana(JFrame v)
    {
    	// Para salir del programa si se pulsa la x de la esquina superior derecha de
    	// la ventana.
        v.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        
        // La ventana coge el tamaño justo para que se vean completamente los componentes
        // que tiene dentro, es decir, el JTextArea y el menú.
        v.pack();

        // Se obtienen las dimensiones en pixels de la pantalla.
        Dimension pantalla = Toolkit.getDefaultToolkit().getScreenSize();
        
        // Se obtienen las dimensiones en pixels de la ventana.
        Dimension ventana = v.getSize();
        
        // Una cuenta para situar la ventana en el centro de la pantalla.
        v.setLocation(
            (pantalla.width - ventana.width) / 2,
            (pantalla.height - ventana.height) / 2);
        
        // Se visualiza la ventana.
        v.setVisible(true);
    }

    /**
     * Contruye el menú "Archivo", con las opciones "Salvar", "Cargar" y "Salir".
     *
     * @param barraMenu Barra de menú en la que añadir el menú "Archivo".
     */
    private void construyeMenuArchivo(JMenuBar barraMenu)
    {
    	// Se crean los tres items del menú.
        JMenuItem salvar = new JMenuItem(new AccionGuardarArchivo(areaTexto));
        JMenuItem cargar = new JMenuItem(new AccionAbrirArchivo(areaTexto));
        JMenuItem salir = new JMenuItem(new AccionSalir(areaTexto));
        
        // Se crea el menú "Archivo"
        JMenu menuArchivo = new JMenu("Archivo");
        
        // Se añaden los items al menú
        menuArchivo.add(salvar);
        menuArchivo.add(cargar);
        menuArchivo.add(salir);
        
        // Se añade el menú a la barra general de menú.
        barraMenu.add(menuArchivo);
    }

    /**
     * Construye el menú "Editar" con las opciones "Buscar", "Cortar", "Copiar" y "Pegar".
     *
     * @param barraMenu Barra de menú a la que añadir el menú "Editar".
     */
    private void construyeMenuEditar(JMenuBar barraMenu)
    {
    	// Construimos el item del menú "Buscar".
        JMenuItem buscar = new JMenuItem(new AccionBuscar(areaTexto));
        
        // Construimos el item del menú "Copiar". Para ello aprovechamos el Action que el
        // JTextArea tiene dentro.
        
        // Se obtiene el Action de "copiar" que tiene el JTextArea dentro.
        Action accionCopiar = areaTexto.getActionMap()
                                       .get(DefaultEditorKit.copyAction);
        
        // Ponemos el nombre en español. Por defecto es algo como "copy to clipboard".
        accionCopiar.putValue(Action.NAME, "Copiar");
        
        // Ponemos una tecla aceleradora. No hace falta, pero si no la ponemos no se verá
        // en el menú, aunque funcionará igual. Ctrl-C siver para copiar.
        accionCopiar.putValue(
            Action.ACCELERATOR_KEY,
            KeyStroke.getAWTKeyStroke('C', Event.CTRL_MASK));

        // Se crea el item de menú con la accion copiar.
        JMenuItem copiar = new JMenuItem(accionCopiar);

        // Idem para cortar.
        Action accionCortar = areaTexto.getActionMap()
                                       .get(DefaultEditorKit.cutAction);
        accionCortar.putValue(Action.NAME, "Cortar");
        accionCortar.putValue(
            Action.ACCELERATOR_KEY,
            KeyStroke.getAWTKeyStroke('X', Event.CTRL_MASK));
        JMenuItem cortar = new JMenuItem(accionCortar);

        // Idem para pegar
        Action accionPegar = areaTexto.getActionMap()
                                      .get(DefaultEditorKit.pasteAction);
        accionPegar.putValue(Action.NAME, "Pegar");
        accionPegar.putValue(
            Action.ACCELERATOR_KEY,
            KeyStroke.getAWTKeyStroke('V', Event.CTRL_MASK));
        JMenuItem pegar = new JMenuItem(accionPegar);

        // Se crea el menu de "editar" y se le añaden los items, con un separador entre
        // "buscar" y "cortar".
        JMenu menuEditar = new JMenu("Editar");
        menuEditar.add(buscar);
        menuEditar.add(new JSeparator());
        menuEditar.add(cortar);
        menuEditar.add(copiar);
        menuEditar.add(pegar);
        
        // Se añade el menú "editar" a la barra de menú.
        barraMenu.add(menuEditar);
    }
    
    private javax.swing.JFrame frame1;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
